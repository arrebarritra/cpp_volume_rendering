#version 430

layout (binding = 1) uniform sampler3D TexVolume; 

// k levels
uniform int k;

// current level l and split axis a
uniform int l;
uniform int a;

uniform uvec3 Rl;
uniform uvec3 Rlp1;

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

//////////////////////////////////////////////////////////////////////////////////////////////////
// From structured/rtisoikd/kd_tree.comp
struct Node { float isoMin, isoMax; };
layout(std430, binding = 3) buffer implKdTree {	Node node[]; };
layout(std430, binding = 5) buffer offsets { uint offset[]; };
uint indexToLoc(uint offset, uvec3 U, uvec3 Rl);
//////////////////////////////////////////////////////////////////////////////////////////////////

void main ()
{
	uvec3 id = gl_GlobalInvocationID;
	if (any(greaterThanEqual(id, Rl))) return;

	uint loc = indexToLoc(offset[l], id, Rl);
	if (l == k - 1) {
		// get min and max values in voxel
		ivec3 iid = ivec3(id);
		float v0 = texelFetch(TexVolume, iid                 , 0).r;
		float v1 = texelFetch(TexVolume, iid + ivec3(1, 0, 0), 0).r;
		float v2 = texelFetch(TexVolume, iid + ivec3(0, 1, 0), 0).r;
		float v3 = texelFetch(TexVolume, iid + ivec3(0, 0, 1), 0).r;
		float v4 = texelFetch(TexVolume, iid + ivec3(1, 1, 0), 0).r;
		float v5 = texelFetch(TexVolume, iid + ivec3(1, 0, 1), 0).r;
		float v6 = texelFetch(TexVolume, iid + ivec3(0, 1, 1), 0).r;
		float v7 = texelFetch(TexVolume, iid + ivec3(1, 1, 1), 0).r;

		node[loc].isoMin = min(min(min(min(min(min(min(v0, v1), v2), v3), v4), v5), v6), v7);
		node[loc].isoMax = max(max(max(max(max(max(max(v0, v1), v2), v3), v4), v5), v6), v7);
	} else {
		// calculate indices of children
		uvec3 idx_left = id;
		idx_left[a] *= 2;
		uvec3 idx_right = idx_left;
		idx_right[a]++;

		// set isomin/max from valid children
		uint locl = indexToLoc(offset[l + 1], idx_left, Rlp1);
		if (idx_right[a] >= Rlp1[a]) {
			node[loc].isoMin = node[locl].isoMin;
			node[loc].isoMax = node[locl].isoMax;
		} else {
			uint locr = indexToLoc(offset[l + 1], idx_right, Rlp1);

			node[loc].isoMin = min(node[locl].isoMin, node[locr].isoMin);
			node[loc].isoMax = max(node[locl].isoMax, node[locr].isoMax);
		}
	}
}